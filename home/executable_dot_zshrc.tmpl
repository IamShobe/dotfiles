#!/bin/zsh
# vim: set filetype=zsh:

if [ -n "${ZSH_DEBUGRC+1}" ]; then
  zmodload zsh/zprof
fi

unameOut="$(uname -s)"
case "${unameOut}" in
    Linux*)     machine=Linux;;
    Darwin*)    machine=Mac;;
    CYGWIN*)    machine=Cygwin;;
    MINGW*)     machine=MinGw;;
    *)          machine="UNKNOWN:${unameOut}"
esac

if [ $machine = 'Mac' ]; then
    export CFLAGS="-Wno-error=implicit-function-declaration"
    export LC_ALL=en_US.UTF-8
    export LANG=en_US.UTF-8
    if [ -x "$(command -v xcrun)" ]; then
        export SDKROOT=$(xcrun --sdk macosx --show-sdk-path)
    fi
fi

# Use emacs keybindings even if our EDITOR is set to vi
bindkey -e

ZSH_CACHE="/tmp/.zsh-${USER}-${ZSH_VERSION}"
# check that folder not exists
if [ ! -d $ZSH_CACHE ]; then
  mkdir -p $ZSH_CACHE && chmod 700 $ZSH_CACHE
fi

if command -v nvim 2>&1 >/dev/null; then
    export EDITOR=nvim
elif command -v vim 2>&1 >/dev/null; then
    export EDITOR=vim
elif command -v code 2>&1 >/dev/null; then
    export EDITOR=code
fi

if command -v bat 2>&1 >/dev/null; then
    export MANPAGER="sh -c 'col -bx | bat -l man -p'"
fi

# bind +- key into ~ as well (OSX)
hidutil property --set '{"UserKeyMapping": [{"HIDKeyboardModifierMappingSrc": 0x700000064, "HIDKeyboardModifierMappingDst": 0x700000035}, {"HIDKeyboardModifierMappingSrc": 0x700000035, "HIDKeyboardModifierMappingDst": 0x700000035}]}'  >/dev/null 2>&1
export ZSH_DIR="{{ .chezmoi.homeDir }}/.zshrc.d"
fpath=(
    ~/.zfunc
    ~/.zfunc/**/*~*/(CVS)#(/N)
    ~/.zfuncs
    ~/.zfuncs/**/*~*/(CVS)#(/N)
    "${fpath[@]}"
)

# Keep 10000 lines of history within the shell and save it to ~/.zsh_history:
HISTSIZE=10000
SAVEHIST=10000
HISTFILE=~/.zsh_history

# change default ls colors
if command -v dircolors &> /dev/null
then
    eval `dircolors -b $ZSH_DIR/ls_colors`
else
    export LSCOLORS=gxBxhxDxfxhxhxhxhxcxcx
fi

source $ZSH_DIR/plugins/zsh-defer/zsh-defer.plugin.zsh

source $ZSH_DIR/venv.zsh
zsh-defer source $ZSH_DIR/completions.zsh

# Base16 Shell
export BASE16_SHELL="$HOME/.config/base16-shell/"
[ -n "$PS1" ] && \
    [ -s "$BASE16_SHELL/profile_helper.sh" ] && \
        source "$BASE16_SHELL/profile_helper.sh"

# autosuggestion has a performance hit here, we know what we doing so we bind it ourself :)
export ZSH_AUTOSUGGEST_MANUAL_REBIND=true

if [ -z $ZSH_PLUGINS_LOADED ]; then  # variable not set yet
  # this also loads fzf.. must be here
  [ -f $HOME/.zshrc.pathbindings.zsh ] && source $HOME/.zshrc.pathbindings.zsh
  # PLUGINS go here
  plugins=(
    $ZSH_DIR/plugins/kube-ps1/kube-ps1.sh
    $ZSH_DIR/plugins/fzf-tab/fzf-tab.zsh
    $ZSH_DIR/plugins/zsh-auto-suggestions/zsh-autosuggestions.zsh
  )

  for plugin ($plugins); do
    if [ -f $plugin ]; then
      zsh-defer source $plugin
    fi
  done
  # PLUGINS END
  ZSH_PLUGINS_LOADED=1  # dont reload plugins on shell "reload" alias
fi

source "{{.chezmoi.sourceDir}}/../links/zshrc/bindings.sh"

source $ZSH_DIR/opts.zsh
source $ZSH_DIR/binds.zsh
source $ZSH_DIR/prompt.zsh


autoload -Uz add-zsh-hook
autoload -U edit-command-line
zle -N edit-command-line
bindkey '^xe' edit-command-line
bindkey '^x^e' edit-command-line


bindkey '^ ' autosuggest-accept


umask 022

_TITLE ()
{
    local PRE= NAME="$1" LENGTH="$2";
    [[ "$NAME" != "${NAME#$HOME/}" || -z "${NAME#$HOME}" ]] &&
        PRE+='~' NAME="${NAME#$HOME}" LENGTH=$[LENGTH-1];
    ((${#NAME}>$LENGTH)) && NAME="/...${NAME:$[${#NAME}-LENGTH+4]}";
    echo "$PRE$NAME"
}

precmd () { 
    if [ -n "$TITLE" ]; then
        print -Pn "\e]0;$TITLE\a" 
    else
        print -Pn "\e]0;$(_TITLE "$PWD" 20)\a"
    fi
}
preexec () {
    print -Pn "\e]0;$2\a"
}
title() { export TITLE="$*" }

export PATH="$HOME/.local/bin:$PATH"
typeset -U PATH path


if [ $machine = 'Mac' ]; then
  # pnpm
  export PNPM_HOME="{{ .chezmoi.homeDir }}/Library/pnpm"
  case ":$PATH:" in
    *":$PNPM_HOME:"*) ;;
    *) export PATH="$PNPM_HOME:$PATH" ;;
  esac
  # pnpm end
fi

function startup {
  # Google cli rc file
  [ -f $HOME/.gcprc ] && source $HOME/.gcprc

  if command -v devbox 2>&1 >/dev/null; then 
    eval "$(devbox global shellenv --init-hook)"
  fi

  if [ -n "$SSH_CLIENT" ]; then
      export DISPLAY=`echo $SSH_CLIENT | cut -d" " -f1`:0
  fi

  # configure rust:
  [ -f $HOME/.cargo/env ] && source $HOME/.cargo/env
  # kubectl krew
  [ -d "$HOME/.krew" ] && export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

  [ -f $HOME/.op/plugins.sh ] && source $HOME/.op/plugins.sh
  
  if command -v atuin 2>&1 >/dev/null; then 
    eval "$(atuin init zsh --disable-up-arrow)"
  fi

  source $ZSH_DIR/aliases.zsh
  [ -f $HOME/.aliases ] && source $HOME/.aliases
  [ -f $HOME/.secrets ] && source $HOME/.secrets
  eval "$(direnv hook zsh)"
}

startup

# debug using - time ZSH_DEBUGRC=1 zsh -i -c exit
if [ -n "${ZSH_DEBUGRC+1}" ]; then
  zprof
fi


